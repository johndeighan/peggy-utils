{
  "version": 3,
  "file": "peggify.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\bin\\peggify.coffee"
  ],
  "names": [],
  "mappings": "AAAgB;AAAA,IAAA,cAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,QAAA,EAAA,QAAA,EAAA,WAAA,EAAA,SAAA,EAAA,GAAA,EAAA;;AAEhB,OAAO,EAAP,MAAA;;AACA,OAAA;EAAQ,QAAR;CAAA,MAAA;;AAEA,GAAA,GAAM,CAAA,MAAM,MAAA,CAAO,OAAP,CAAN;;AACN,CAAA,CAAC,QAAD,CAAA,GAAa,GAAG,CAAC,OAAjB;;AAEA,OAAA;EAAQ,MAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,OAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,aAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,QAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,cAAR;CAAA,MAAA,uCAZgB;;;AAgBhB,QAAA,GAAW,OAAO,CAAC,IAAI,CAAC,CAAD;;AACvB,MAAA,CAAO,EAAE,CAAC,UAAH,CAAc,QAAd,CAAP,EAAgC,CAAA,cAAA,CAAA,CAAiB,QAAjB,CAAA,CAAhC;;AACA,QAAA,GAAW,QAAQ,CAAC,KAAT,CAAe,QAAf,CAAwB,CAAC,EAAzB,CAA4B,CAAC,CAA7B;;AACX,IAAG,QAAA,GAAW,QAAQ,CAAC,KAAT,CAAe,iBAAf,CAAd;EACC,IAAA,GAAO,QAAQ,CAAC,CAAD,EADhB;CAAA,MAAA;EAGC,IAAA,GAAO,UAHR;;;AAKA,SAAA,GAAY,EAAE,CAAC,YAAH,CAAgB,QAAhB,EAA0B,MAA1B,CACV,CAAC,QADS,CAAA,CAEV,CAAC,UAFS,CAEE,IAFF,EAEQ,EAFR;;AAIZ,cAAA,GAAiB,IAAI,cAAJ,CAAmB,IAAnB,EAAyB;EAAC,QAAA,EAAU;AAAX,CAAzB;;AACjB,QAAA,GAAW,IAAI,QAAJ,CAAa,IAAb;;AAEX,MAAA,GAAS,QAAA,CAAS,SAAT,EAAoB;EAC5B,iBAAA,EAAmB,CAAC,GAAD,CADS;EAE5B,MAAA,EAAQ,IAFoB;EAG5B,MAAA,EAAQ,QAHoB;EAI5B,aAAA,EAAe,QAJa;EAK5B,KAAA,EAAO,IALqB;EAM5B,OAAA,EAAS,OAAA,CAAQ,QAAR,EAAkB,UAAlB,CANmB;EAO5B,cAP4B;EAQ5B;AAR4B,CAApB;;AAWT,cAAc,CAAC,OAAf,CAAuB,OAAA,CAAQ,QAAR,EAAkB,gBAAlB,CAAvB;;AACA,QAAQ,CAAC,OAAT,CAAiB,OAAA,CAAQ,QAAR,EAAkB,cAAlB,CAAjB;;AAEA,WAAA,GAAc,OAAA,CAAQ,QAAR,EAAkB,KAAlB;;AACd,OAAO,CAAC,GAAR,CAAY,CAAA,cAAA,CAAA,CAAiB,WAAjB,CAAA,CAAZ;;AACA,EAAE,CAAC,aAAH,CAAiB,WAAjB,EAA8B,MAA9B,EA/CgB;;;AAkDhB,OAAO,CAAC,GAAR,CAAY,QAAA,CAAS,CAAA,QAAA,CAAA,CAAW,WAAX,CAAA,CAAT,EAAmC;EAC9C,QAAA,EAAU,MADoC;EAE9C,WAAA,EAAa;AAFiC,CAAnC,CAAZ",
  "sourcesContent": [
    "# peggify.coffee\r\n\r\nimport fs from 'node:fs'\r\nimport {execSync} from 'node:child_process'\r\n\r\npkg = await import('peggy')\r\n{generate} = pkg.default\r\n\r\nimport {assert} from '@jdeighan/llutils'\r\nimport {withExt} from '@jdeighan/llutils/fs'\r\nimport {DefaultTracer} from '@jdeighan/peggy-utils'\r\nimport {OpDumper} from '@jdeighan/peggy-utils/OpDumper'\r\nimport {ByteCodeWriter} from '@jdeighan/peggy-utils/ByteCodeWriter'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nfilePath = process.argv[2]\r\nassert fs.existsSync(filePath), \"No such file: #{filePath}\"\r\nfileName = filePath.split(/[\\\\\\/]/).at(-1)\r\nif lMatches = fileName.match(/^[a-zA-z0-9_-]*/)\r\n\tstub = lMatches[0]\r\nelse\r\n\tstub = 'unknown'\r\n\r\npeggyCode = fs.readFileSync(filePath, 'utf8') \\\r\n\t\t.toString() \\\r\n\t\t.replaceAll('\\r', '')\r\n\r\nbyteCodeWriter = new ByteCodeWriter(stub, {detailed: false})\r\nopDumper = new OpDumper(stub)\r\n\r\njsCode = generate(peggyCode, {\r\n\tallowedStartRules: ['*']\r\n\tformat: 'es'\r\n\toutput: 'source'\r\n\tgrammarSource: filePath\r\n\ttrace: true\r\n\tdumpAST: withExt(filePath, \".ast.txt\")    # --- \"./#{stub}.ast.txt\"\r\n\tbyteCodeWriter\r\n\topDumper\r\n\t})\r\n\r\nbyteCodeWriter.writeTo(withExt(filePath, '.bytecodes.txt'))\r\nopDumper.writeTo(withExt(filePath, '.opcodes.txt'))\r\n\r\noutFilePath = withExt(filePath, '.js')\r\nconsole.log \"Writing file '#{outFilePath}\"\r\nfs.writeFileSync(outFilePath, jsCode)\r\n\r\n# --- Check if JS file compiles\r\nconsole.log execSync(\"node -c #{outFilePath}\", {\r\n\tencoding: 'utf8'\r\n\twindowsHide: true\r\n\t})\r\n"
  ]
}