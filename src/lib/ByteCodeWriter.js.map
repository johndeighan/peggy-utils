{
  "version": 3,
  "file": "ByteCodeWriter.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\ByteCodeWriter.coffee"
  ],
  "names": [],
  "mappings": "AAAuB;AAEvB,OAAO,EAAP,MAAA;;AACA,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,QAD7B;EACuC,QADvC;EAEC,MAFD;EAES,KAFT;EAEgB,KAFhB;EAEuB,IAFvB;CAAA,MAAA;;AAIA,OAAA;EAAQ,QAAR;EAAkB,QAAlB;CAAA,MAAA,2BAPuB;;;;;AAYvB,OAAA,IAAa,iBAAN,MAAA,eAAA;EAEN,WAAa,MAAA,EAAQ,WAAS,CAAA,CAAjB,CAAA;IAAC,IAAC,CAAA;IAEd,IAAC,CAAA,UAAD,GAAc;IACd,IAAC,CAAA,MAAD,GAAU,CAAA,EADZ;;IAIE,IAAC,CAAA,QAAD,GAAY;IACZ,IAAC,CAAA,YAAD,GAAgB,MALlB;;IAQE,IAAC,CAAA,QAAD,GAAY,QAAQ,CAAC;EAVT,CAAd;;;EAcC,MAAQ,CAAC,GAAD,CAAA;IAEP,MAAA,CAAQ,GAAG,CAAC,IAAJ,KAAY,SAApB,EAAgC,eAAhC;IACA,MAAA,CAAQ,GAAG,CAAC,KAAK,CAAC,MAAV,GAAmB,CAA3B,EAA+B,UAA/B;IACA,IAAC,CAAA,QAAD,GAAY,GAAG,CAAC;IAChB,IAAC,CAAA,YAAD,GAAgB,GAAG,CAAC;EALb,CAdT;;;EAwBC,GAAK,CAAC,QAAD,EAAW,QAAX,CAAA;IAEJ,MAAA,CAAQ,OAAO,QAAP,KAAmB,QAA3B,EAAsC,cAAtC;IACA,MAAA,CAAO,KAAK,CAAC,OAAN,CAAc,QAAd,CAAP,EAAgC,cAAhC;IACA,MAAA,CAAO,CAAC,IAAC,CAAA,MAAM,CAAC,QAAD,CAAf,EAA2B,CAAA,KAAA,CAAA,CAAQ,QAAR,CAAA,gBAAA,CAA3B;IACA,IAAC,CAAA,UAAU,CAAC,IAAZ,CAAiB,QAAjB;IACA,IAAC,CAAA,MAAM,CAAC,QAAD,CAAP,GAAoB;EANhB,CAxBN;;;EAmCC,SAAW,CAAC,EAAD,EAAK,GAAL,CAAA;AAEV,YAAO,EAAP;AAAA,WACM,EADN;AACc,eAAO,CAAC,mBAAD,EAAsB,EAAtB,EAAuC,EAAvC;AADrB,WAEM,CAFN;AAEc,eAAO,CAAC,cAAD,EAAsB,EAAtB,EAAuC,EAAvC;AAFrB,WAGM,CAHN;AAGc,eAAO,CAAC,gBAAD,EAAsB,EAAtB,EAAuC,EAAvC;AAHrB,WAIM,CAJN;AAIc,eAAO,CAAC,WAAD,EAAsB,EAAtB,EAAuC,EAAvC;AAJrB,WAKM,CALN;AAKc,eAAO,CAAC,aAAD,EAAsB,EAAtB,EAAuC,EAAvC;AALrB,WAMM,CANN;AAMc,eAAO,CAAC,kBAAD,EAAsB,EAAtB,EAAuC,EAAvC;AANrB,WAOM,CAPN;AAOc,eAAO,CAAC,KAAD,EAAsB,EAAtB,EAAuC,EAAvC;AAPrB,WAQM,CARN;AAQc,eAAO,CAAC,aAAD,EAAsB,EAAtB,EAAuC,EAAvC;AARrB,WASM,CATN;AASc,eAAO,CAAC,OAAD,EAAsB,CAAC,GAAD,CAAtB,EAAuC,EAAvC;AATrB,WAUM,CAVN;AAUc,eAAO,CAAC,KAAD,EAAsB,EAAtB,EAAuC,EAAvC;AAVrB,WAWM,EAXN;AAWc,eAAO,CAAC,QAAD,EAAsB,EAAtB,EAAuC,EAAvC;AAXrB,WAYM,EAZN;AAYc,eAAO,CAAC,MAAD,EAAsB,CAAC,EAAD,CAAtB,EAAuC,EAAvC;AAZrB,WAaM,EAbN;AAac,eAAO,CAAC,MAAD,EAAsB,EAAtB,EAAuC,EAAvC;AAbrB,WAcM,EAdN;AAcc,eAAO,CAAC,OAAD,EAAsB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,CAAtB,EAAyC,EAAzC;AAdrB,WAeM,EAfN;AAec,eAAO,CAAC,IAAD,EAAsB,EAAtB,EAAuC,CAAC,MAAD,EAAS,MAAT,CAAvC;AAfrB,WAgBM,EAhBN;AAgBc,eAAO,CAAC,UAAD,EAAsB,EAAtB,EAAuC,CAAC,MAAD,EAAS,MAAT,CAAvC;AAhBrB,WAiBM,EAjBN;AAiBc,eAAO,CAAC,cAAD,EAAsB,EAAtB,EAAuC,CAAC,MAAD,EAAS,MAAT,CAAvC;AAjBrB,WAkBM,EAlBN;AAkBc,eAAO,CAAC,OAAD,EAAsB,EAAtB,EAAuC,CAAC,MAAD,EAAS,MAAT,CAAvC;AAlBrB,WAmBM,EAnBN;AAmBc,eAAO,CAAC,OAAD,EAAsB,EAAtB,EAAuC,CAAC,MAAD,EAAS,MAAT,CAAvC;AAnBrB,WAoBM,EApBN;AAoBc,eAAO,CAAC,eAAD,EAAsB,EAAtB,EAAuC,CAAC,MAAD,EAAS,MAAT,CAAvC;AApBrB,WAqBM,EArBN;AAqBc,eAAO,CAAC,eAAD,EAAsB,EAAtB,EAAuC,CAAC,MAAD,EAAS,MAAT,CAAvC;AArBrB,WAsBM,EAtBN;AAsBc,eAAO,CAAC,iBAAD,EAAsB,EAAtB,EAAuC,CAAC,MAAD,CAAvC;AAtBrB,WAuBM,EAvBN;AAuBc,eAAO,CAAC,WAAD,EAAsB,EAAtB,EAAuC,CAAC,MAAD,EAAS,MAAT,CAAvC;AAvBrB,WAwBM,EAxBN;AAwBc,eAAO,CAAC,cAAD,EAAsB,CAAC,MAAD,CAAtB,EAAuC,CAAC,MAAD,EAAS,MAAT,CAAvC;AAxBrB,WAyBM,EAzBN;AAyBc,eAAO,CAAC,iBAAD,EAAsB,CAAC,MAAD,CAAtB,EAAuC,CAAC,MAAD,EAAS,MAAT,CAAvC;AAzBrB,WA0BM,EA1BN;AA0Bc,eAAO,CAAC,kBAAD,EAAsB,CAAC,QAAD,CAAtB,EAAuC,EAAvC;AA1BrB,WA2BM,EA3BN;AA2Bc,eAAO,CAAC,UAAD,EAAsB,CAAC,MAAD,CAAtB,EAAuC,EAAvC;AA3BrB,WA4BM,EA5BN;AA4Bc,eAAO,CAAC,eAAD,EAAsB,CAAC,MAAD,CAAtB,EAAuC,EAAvC;AA5BrB,WA6BM,EA7BN;AA6Bc,eAAO,CAAC,MAAD,EAAsB,CAAC,cAAD,CAAtB,EAAuC,EAAvC;AA7BrB,WA8BM,EA9BN;AA8Bc,eAAO,CAAC,gBAAD,EAAsB,CAAC,SAAD,CAAtB,EAAuC,EAAvC;AA9BrB,WA+BM,EA/BN;AA+Bc,eAAO,CAAC,kBAAD,EAAsB,CAAC,SAAD,CAAtB,EAAuC,EAAvC;AA/BrB,WAgCM,EAhCN;AAgCc,eAAO,CAAC,MAAD,EAAsB,EAAtB,EAAuC,EAAvC;AAhCrB,WAiCM,EAjCN;AAiCc,eAAO,CAAC,MAAD,EAAsB,CAAC,OAAD,CAAtB,EAAuC,EAAvC;AAjCrB;eAmCE,KAAA,CAAM,CAAA,gBAAA,CAAA,CAAmB,EAAnB,CAAA,QAAA,CAAA,CAAgC,GAAhC,CAAA,CAAN;AAnCF;EAFU,CAnCZ;;;EA4EC,MAAQ,CAAC,GAAD,EAAM,OAAN,CAAA;AAET,QAAA,OAAA,EAAA,KAAA,EAAA,MAAA,EAAA,IAAA,EAAA;IAAE,IAAI,OAAA,KAAW,GAAf;AACC,aAAO,GAAG,CAAC,QAAJ,CAAA,EADR;;IAGA,CAAC,KAAD,EAAQ,IAAR,CAAA,GAAgB,OAAO,CAAC,KAAR,CAAc,GAAd;AAEhB,YAAO,IAAP;AAAA,WAEM,MAFN;QAGE,IAAI,GAAA,GAAM,IAAC,CAAA,UAAU,CAAC,MAAtB;UACC,MAAA,GAAS,CAAA,CAAA,CAAA,CAAI,IAAC,CAAA,UAAU,CAAC,GAAD,CAAf,CAAA,CAAA,EADV;SAAA,MAAA;UAGC,MAAA,GAAS,CAAA,EAAA,CAAA,CAAK,GAAL,CAAA,CAAA,EAHV;;AADI;AAFN,WAQM,KARN;QASE,MAAA,GAAS,CAAA,CAAA,CAAA,CAAI,IAAC,CAAA,QAAQ,CAAC,GAAD,CAAb,CAAA,CAAA;AADL;AARN,WAWM,KAXN;AAAA,WAWY,GAXZ;QAYE,MAAA,GAAS,GAAG,CAAC,QAAJ,CAAA;AADC;AAXZ,WAcM,aAdN;QAeE,OAAA,GAAU,IAAC,CAAA,YAAY,CAAC,GAAD;QACvB,CAAA,CAAC,IAAD,EAAO,KAAP,CAAA,GAAgB,OAAhB;AACA,gBAAO,IAAP;AAAA,eACM,SADN;YAEE,MAAA,GAAS,CAAA,EAAA,CAAA,CAAK,KAAL,CAAA,EAAA;AADL;AADN,eAGM,OAHN;YAIE,MAAA,GAAS;AADL;AAHN,eAKM,KALN;YAME,MAAA,GAAS;AADL;AALN;YAQE,KAAA,CAAM,CAAA,0BAAA,CAAA,CAA6B,IAA7B,CAAA,CAAN;AARF;AAHI;AAdN,WA0BM,OA1BN;QA2BE,IAAG,KAAH;UACC,MAAA,GAAS,CAAA,CAAA,CAAG,KAAH,CAAA,CAAA,CAAA,CAAY,GAAZ,CAAA,EADV;SAAA,MAAA;UAGC,MAAA,GAAS,CAAA,OAAA,CAAA,CAAU,GAAV,CAAA,EAHV;;AADI;AA1BN,WAgCM,OAhCN;QAiCE,IAAG,KAAH;UACC,MAAA,GAAS,CAAA,CAAA,CAAG,KAAH,CAAA,EAAA,CAAA,CAAa,GAAb,CAAA,CAAA,EADV;SAAA,MAAA;UAGC,MAAA,GAAS,CAAA,OAAA,CAAA,CAAU,GAAV,CAAA,EAHV;;AADI;AAhCN;QAuCE,KAAA,CAAM,CAAA,uBAAA,CAAA,CAA0B,IAA1B,CAAA,CAAN;AAvCF;IAyCA,IAAG,IAAC,CAAA,QAAJ;AACC,aAAO,CAAA,CAAA,CAAA,CAAI,GAAJ,CAAA,EAAA,CAAA,CAAY,MAAZ,CAAA,EADR;KAAA,MAAA;AAGC,aAAO,OAHR;;EAhDO,CA5ET;;;EAmIC,KAAO,CAAC,QAAD,CAAA;AAEN;AAAF,QAAA,SAAA,EAAA,QAAA,EAAA,CAAA,EAAA,CAAA,EAAA,QAAA,EAAA,QAAA,EAAA,KAAA,EAAA,UAAA,EAAA,MAAA,EAAA,OAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,EAAA,EAAA;IACE,MAAA,GAAS;IACT,GAAA,GAAM;AACN,WAAO,GAAA,GAAM,QAAQ,CAAC,MAAtB;MACC,EAAA,GAAK,QAAQ,CAAC,GAAD;MACb,GAAA,IAAO;MAEP,CAAC,IAAD,EAAO,QAAP,EAAiB,UAAjB,CAAA,GAA+B,IAAC,CAAA,SAAD,CAAW,EAAX,EAAe,GAAf;MAC/B,OAAA,GAAU,QAAQ,CAAC;MACnB,IAAI,OAAA,KAAW,CAAf;QACC,IAAG,IAAC,CAAA,QAAJ;UACC,MAAM,CAAC,IAAP,CAAY,CAAA,CAAA,CAAA,CAAI,EAAJ,CAAA,EAAA,CAAA,CAAW,IAAX,CAAA,CAAZ,EADD;SAAA,MAAA;UAGC,MAAM,CAAC,IAAP,CAAY,CAAA,CAAA,CAAG,IAAH,CAAA,CAAZ,EAHD;SADD;OAAA,MAAA;QAMC,KAAA,GAAQ,QAAQ,CAAC,KAAT,CAAe,GAAf,EAAoB,GAAA,GAAM,OAA1B;QACR,GAAA,IAAO;QACP,QAAA,GAAW,KAAK,CAAC,GAAN,CAAU,CAAC,GAAD,EAAK,CAAL,CAAA,GAAA;iBAAW,IAAC,CAAA,MAAD,CAAQ,GAAR,EAAa,QAAQ,CAAC,CAAD,CAArB;QAAX,CAAV;QACX,IAAG,IAAC,CAAA,QAAJ;UACC,MAAM,CAAC,IAAP,CAAY,CAAA,CAAA,CAAA,CAAI,EAAJ,CAAA,EAAA,CAAA,CAAW,IAAX,EAAA,CAAA,CAAmB,QAAQ,CAAC,IAAT,CAAc,GAAd,CAAnB,CAAA,CAAZ,EADD;SAAA,MAAA;UAGC,MAAM,CAAC,IAAP,CAAY,CAAA,CAAA,CAAG,IAAH,EAAA,CAAA,CAAW,QAAQ,CAAC,IAAT,CAAc,GAAd,CAAX,CAAA,CAAZ,EAHD;SATD;;MAcA,SAAA,GAAY,GAAA,GAAM,UAAU,CAAC;MAC7B,KAAA,oDAAA;;QACC,QAAA,GAAW,QAAQ,CAAC,GAAD;QACnB,GAAA,IAAO;AAEP,gBAAO,KAAP;AAAA,eACM,MADN;YAEE,IAAI,QAAA,GAAW,CAAf;cACC,MAAM,CAAC,IAAP,CAAY,MAAZ,EADD;;AADI;AADN,eAIM,MAJN;YAKE,IAAA,CAAA;AADI;AAJN;YAOE,KAAA,CAAM,CAAA,iBAAA,CAAA,CAAoB,KAApB,CAAA,CAAN;AAPF;QASA,OAAA,GAAU,QAAQ,CAAC,KAAT,CAAe,SAAf,EAA0B,SAAA,GAAY,QAAtC;QACV,MAAM,CAAC,IAAP,CAAY,QAAA,CAAS,IAAC,CAAA,KAAD,CAAO,OAAP,CAAT,CAAZ;QACA,SAAA,IAAa;MAfd;MAgBA,GAAA,GAAM;IArCP;AAsCA,WAAO,MAAM,CAAC,IAAP,CAAY,IAAZ;EA3CD,CAnIR;;;EAkLC,QAAU,CAAA,CAAA;AAEX,QAAA,KAAA,EAAA,CAAA,EAAA,QAAA,EAAA,MAAA,EAAA,GAAA,EAAA,GAAA,EAAA;IAAE,MAAA,GAAS;AACT;IAAA,KAAA,qCAAA;;MACC,MAAM,CAAC,IAAP,CAAY,CAAA,CAAA,CAAA,CAAI,QAAJ,CAAA,CAAA,CAAZ;MACA,QAAA,GAAW,IAAC,CAAA,MAAM,CAAC,QAAD;MAClB,KAAA,GAAQ,IAAC,CAAA,KAAD,CAAO,QAAP,CAAgB,CAAC,OAAjB,CAAA;MACR,IAAI,KAAA,KAAS,EAAb;QACC,MAAM,CAAC,IAAP,CAAY,QAAA,CAAS,KAAT,CAAZ,EADD;;MAEA,MAAM,CAAC,IAAP,CAAY,EAAZ;IAND;AAOA,WAAO,MAAM,CAAC,IAAP,CAAY,IAAZ,CAAiB,CAAC,OAAlB,CAAA;EAVE,CAlLX;;;EAgMC,OAAS,CAAC,QAAD,CAAA;IAER,OAAO,CAAC,GAAR,CAAY,CAAA,qBAAA,CAAA,CAAwB,QAAxB,CAAA,CAAZ;IACA,EAAE,CAAC,aAAH,CAAiB,QAAjB,EAA2B,IAAC,CAAA,QAAD,CAAA,CAA3B;EAHQ;;AAlMH",
  "sourcesContent": [
    "# ByteCodeWriter.coffee\r\n\r\nimport fs from 'node:fs'\r\nimport {\r\n\tundef, defined, notdefined, isString, untabify,\r\n\tassert, croak, range, pass,\r\n\t} from '@jdeighan/llutils'\r\nimport {indented, undented} from '@jdeighan/llutils/indent'\r\n# pass = () =>\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class ByteCodeWriter\r\n\r\n\tconstructor: (@name, hOptions={}) ->\r\n\r\n\t\t@lRuleNames = [];\r\n\t\t@hRules = {}\r\n\r\n\t\t# --- These are set when the AST is known\r\n\t\t@literals = undef\r\n\t\t@expectations = undef\r\n\r\n\t\t# --- options\r\n\t\t@detailed = hOptions.detailed\r\n\r\n\t# ..........................................................\r\n\r\n\tsetAST: (ast) ->\r\n\r\n\t\tassert (ast.type == 'grammar'), \"not a grammar\"\r\n\t\tassert (ast.rules.length > 0), \"no rules\"\r\n\t\t@literals = ast.literals\r\n\t\t@expectations = ast.expectations\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tadd: (ruleName, lOpcodes) ->\r\n\r\n\t\tassert (typeof ruleName == 'string'), \"not a string\"\r\n\t\tassert Array.isArray(lOpcodes), \"not an array\"\r\n\t\tassert !@hRules[ruleName], \"rule #{ruleName} already defined\"\r\n\t\t@lRuleNames.push ruleName\r\n\t\t@hRules[ruleName] = lOpcodes\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tgetOpInfo: (op, pos) ->\r\n\r\n\t\tswitch op\r\n\t\t\twhen 35 then return ['PUSH_EMPTY_STRING', [],              []]\r\n\t\t\twhen 5  then return ['PUSH_CUR_POS',      [],              []]\r\n\t\t\twhen 1  then return ['PUSH_UNDEFINED',    [],              []]\r\n\t\t\twhen 2  then return ['PUSH_NULL',         [],              []]\r\n\t\t\twhen 3  then return ['PUSH_FAILED',       [],              []]\r\n\t\t\twhen 4  then return ['PUSH_EMPTY_ARRAY',  [],              []]\r\n\t\t\twhen 6  then return ['POP',               [],              []]\r\n\t\t\twhen 7  then return ['POP_CUR_POS',       [],              []]\r\n\t\t\twhen 8  then return ['POP_N',             ['/'],           []]\r\n\t\t\twhen 9  then return ['NIP',               [],              []]\r\n\t\t\twhen 10 then return ['APPEND',            [],              []]\r\n\t\t\twhen 11 then return ['WRAP',              [''],            []]\r\n\t\t\twhen 12 then return ['TEXT',              [],              []]\r\n\t\t\twhen 36 then return ['PLUCK',             ['/','/','/','p'], []]\r\n\t\t\twhen 13 then return ['IF',                [],              ['THEN', 'ELSE']]\r\n\t\t\twhen 14 then return ['IF_ERROR',          [],              ['THEN', 'ELSE']]\r\n\t\t\twhen 15 then return ['IF_NOT_ERROR',      [],              ['THEN', 'ELSE']]\r\n\t\t\twhen 30 then return ['IF_LT',             [],              ['THEN', 'ELSE']]\r\n\t\t\twhen 31 then return ['IF_GE',             [],              ['THEN', 'ELSE']]\r\n\t\t\twhen 32 then return ['IF_LT_DYNAMIC',     [],              ['THEN', 'ELSE']]\r\n\t\t\twhen 33 then return ['IF_GE_DYNAMIC',     [],              ['THEN', 'ELSE']]\r\n\t\t\twhen 16 then return ['WHILE_NOT_ERROR',   [],              ['THEN']]\r\n\t\t\twhen 17 then return ['MATCH_ANY',         [],              ['THEN', 'ELSE']]\r\n\t\t\twhen 18 then return ['MATCH_STRING',      ['/lit'],        ['THEN', 'ELSE']]\r\n\t\t\twhen 19 then return ['MATCH_STRING_IC',   ['/lit'],        ['THEN', 'ELSE']]\r\n\t\t\twhen 20 then return ['MATCH_CHAR_CLASS',  ['/class'],      []]\r\n\t\t\twhen 21 then return ['ACCEPT_N',          ['/num'],        []]\r\n\t\t\twhen 22 then return ['ACCEPT_STRING',     ['/lit'],        []]\r\n\t\t\twhen 23 then return ['FAIL',              ['/expectation'],[]]\r\n\t\t\twhen 24 then return ['LOAD_SAVED_POS',    ['pos/num'],     []]\r\n\t\t\twhen 25 then return ['UPDATE_SAVED_POS',  ['pos/num'],     []]\r\n\t\t\twhen 26 then return ['CALL',              [],              []]\r\n\t\t\twhen 27 then return ['RULE',              ['/rule'],       []]\r\n\t\t\telse\r\n\t\t\t\tcroak \"Unknown opcode: #{op} at pos #{pos}\"\r\n\r\n\t# ..........................................................\r\n\r\n\targStr: (arg, infoStr) ->\r\n\r\n\t\tif (infoStr == '/')\r\n\t\t\treturn arg.toString()\r\n\r\n\t\t[label, type] = infoStr.split('/')\r\n\r\n\t\tswitch type\r\n\r\n\t\t\twhen 'rule'\r\n\t\t\t\tif (arg < @lRuleNames.length)\r\n\t\t\t\t\tresult = \"<#{@lRuleNames[arg]}>\"\r\n\t\t\t\telse\r\n\t\t\t\t\tresult = \"<##{arg}>\"\r\n\r\n\t\t\twhen 'lit'\r\n\t\t\t\tresult = \"'#{@literals[arg]}'\"\r\n\r\n\t\t\twhen 'num','i'\r\n\t\t\t\tresult = arg.toString()\r\n\r\n\t\t\twhen 'expectation'\r\n\t\t\t\thExpect = @expectations[arg]\r\n\t\t\t\t{type, value} = hExpect\r\n\t\t\t\tswitch type\r\n\t\t\t\t\twhen 'literal'\r\n\t\t\t\t\t\tresult = \"\\\"#{value}\\\"\"\r\n\t\t\t\t\twhen 'class'\r\n\t\t\t\t\t\tresult = \"[..]\"\r\n\t\t\t\t\twhen 'any'\r\n\t\t\t\t\t\tresult = '.'\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tcroak \"Unknown expectation type: #{type}\"\r\n\t\t\twhen 'block'\r\n\t\t\t\tif label\r\n\t\t\t\t\tresult = \"#{label}:#{arg}\"\r\n\t\t\t\telse\r\n\t\t\t\t\tresult = \"BLOCK: #{arg}\"\r\n\r\n\t\t\twhen 'class'\r\n\t\t\t\tif label\r\n\t\t\t\t\tresult = \"#{label}:[#{arg}]\"\r\n\t\t\t\telse\r\n\t\t\t\t\tresult = \"CLASS: #{arg}\"\r\n\r\n\t\t\telse\r\n\t\t\t\tcroak \"argStr(): unknown type #{type}\"\r\n\r\n\t\tif @detailed\r\n\t\t\treturn \"(#{arg}) #{result}\"\r\n\t\telse\r\n\t\t\treturn result\r\n\r\n\t# ..........................................................\r\n\r\n\topStr: (lOpcodes) ->\r\n\r\n\t\tdebugger\r\n\t\tlLines = []\r\n\t\tpos = 0\r\n\t\twhile (pos < lOpcodes.length)\r\n\t\t\top = lOpcodes[pos]\r\n\t\t\tpos += 1\r\n\r\n\t\t\t[name, lArgInfo, lBlockInfo] = @getOpInfo(op, pos)\r\n\t\t\tnumArgs = lArgInfo.length\r\n\t\t\tif (numArgs == 0)\r\n\t\t\t\tif @detailed\r\n\t\t\t\t\tlLines.push \"(#{op}) #{name}\"\r\n\t\t\t\telse\r\n\t\t\t\t\tlLines.push \"#{name}\"\r\n\t\t\telse\r\n\t\t\t\tlArgs = lOpcodes.slice(pos, pos + numArgs)\r\n\t\t\t\tpos += numArgs\r\n\t\t\t\tlArgDesc = lArgs.map (arg,i) => @argStr(arg, lArgInfo[i])\r\n\t\t\t\tif @detailed\r\n\t\t\t\t\tlLines.push \"(#{op}) #{name} #{lArgDesc.join(' ')}\"\r\n\t\t\t\telse\r\n\t\t\t\t\tlLines.push \"#{name} #{lArgDesc.join(' ')}\"\r\n\r\n\t\t\tblockBase = pos + lBlockInfo.length\r\n\t\t\tfor label,i in lBlockInfo\r\n\t\t\t\tblockLen = lOpcodes[pos]\r\n\t\t\t\tpos += 1\r\n\r\n\t\t\t\tswitch label\r\n\t\t\t\t\twhen 'ELSE'\r\n\t\t\t\t\t\tif (blockLen > 0)\r\n\t\t\t\t\t\t\tlLines.push 'ELSE'\r\n\t\t\t\t\twhen 'THEN'\r\n\t\t\t\t\t\tpass()\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tcroak \"Bad block label: #{label}\"\r\n\r\n\t\t\t\tlSubOps = lOpcodes.slice(blockBase, blockBase + blockLen)\r\n\t\t\t\tlLines.push indented(@opStr(lSubOps))\r\n\t\t\t\tblockBase += blockLen\r\n\t\t\tpos = blockBase\r\n\t\treturn lLines.join(\"\\n\")\r\n\r\n\t# ..........................................................\r\n\r\n\tgetBlock: () ->\r\n\r\n\t\tlParts = []\r\n\t\tfor ruleName in Object.keys(@hRules)\r\n\t\t\tlParts.push \"<#{ruleName}>\"\r\n\t\t\tlOpcodes = @hRules[ruleName]\r\n\t\t\tblock = @opStr(lOpcodes).trimEnd()\r\n\t\t\tif (block != '')\r\n\t\t\t\tlParts.push indented(block)\r\n\t\t\tlParts.push ''\r\n\t\treturn lParts.join(\"\\n\").trimEnd()\r\n\r\n\t# ..........................................................\r\n\r\n\twriteTo: (filePath) ->\r\n\r\n\t\tconsole.log \"Writing bytecodes to #{filePath}\"\r\n\t\tfs.writeFileSync(filePath, @getBlock())\r\n\t\treturn\r\n"
  ]
}