{
  "version": 3,
  "file": "ByteCodeWriter.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\ByteCodeWriter.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# ByteCodeWriter.coffee\r\n\r\nimport fs from 'node:fs'\r\nimport {\r\n\tundef, defined, notdefined, isString,\r\n\tassert, croak, range, indented, undented,\r\n\t} from '@jdeighan/vllu'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class ByteCodeWriter\r\n\r\n\tconstructor: (@name, hOptions={}) ->\r\n\r\n\t\t@hRules = {}\r\n\t\t@hCounts = {}\r\n\t\t@lOpcodes = undef\r\n\t\t@detailed = hOptions.detailed\r\n\r\n\t# ..........................................................\r\n\r\n\tsetAST: (ast) ->\r\n\r\n\t\tassert (ast.type == 'grammar'), \"not a grammar\"\r\n\t\tassert (ast.rules.length > 0), \"no rules\"\r\n\t\t@ast = ast\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tgetOpInfo: (op) ->\r\n\r\n\t\tswitch op\r\n\t\t\twhen 35 then return ['PUSH_EMPTY_STRING']\r\n\t\t\twhen 5  then return ['PUSH_CUR_POS']\r\n\t\t\twhen 1  then return ['PUSH_UNDEFINED']\r\n\t\t\twhen 2  then return ['PUSH_NULL']\r\n\t\t\twhen 3  then return ['PUSH_FAILED']\r\n\t\t\twhen 4  then return ['PUSH_EMPTY_ARRAY']\r\n\t\t\twhen 6  then return ['POP']\r\n\t\t\twhen 7  then return ['POP_CUR_POS']\r\n\t\t\twhen 8  then return ['POP_N', '/number']\r\n\t\t\twhen 9  then return ['NIP']\r\n\t\t\twhen 10 then return ['APPEND']\r\n\t\t\twhen 11 then return ['WRAP', undef]\r\n\t\t\twhen 12 then return ['TEXT']\r\n\t\t\twhen 36 then return ['PLUCK', undef, undef, undef, 'p']\r\n\t\t\twhen 13 then return ['IF', 'OK/block','FAIL/block']\r\n\t\t\twhen 14 then return ['IF_ERROR', 'OK/block','FAIL/block']\r\n\t\t\twhen 15 then return ['IF_NOT_ERROR', 'OK/block','FAIL/block']\r\n\t\t\twhen 30 then return ['IF_LT', 'OK/block','FAIL/block']\r\n\t\t\twhen 31 then return ['IF_GE', 'OK/block','FAIL/block']\r\n\t\t\twhen 32 then return ['IF_LT_DYNAMIC', 'OK/block','FAIL/block']\r\n\t\t\twhen 33 then return ['IF_GE_DYNAMIC', 'OK/block','FAIL/block']\r\n\t\t\twhen 16 then return ['WHILE_NOT_ERROR', 'OK/block']\r\n\t\t\twhen 17 then return ['MATCH_ANY', 'OK/block','FAIL/block']\r\n\t\t\twhen 18 then return ['MATCH_STRING', '/literal', 'OK/block', 'FAIL/block']\r\n\t\t\twhen 19 then return ['MATCH_STRING_IC', '/literal', 'OK/block', 'FAIL/block']\r\n\t\t\twhen 20 then return ['MATCH_CHAR_CLASS', '/class']\r\n\t\t\twhen 21 then return ['ACCEPT_N', '/number']\r\n\t\t\twhen 22 then return ['ACCEPT_STRING', '/literal']\r\n\t\t\twhen 23 then return ['FAIL', '/expectation']\r\n\t\t\twhen 24 then return ['LOAD_SAVED_POS', 'pos/number']\r\n\t\t\twhen 25 then return ['UPDATE_SAVED_POS', 'pos/number']\r\n\t\t\twhen 26 then return ['CALL']\r\n\t\t\twhen 27 then return ['RULE', '/rule']\r\n\t\t\telse\r\n\t\t\t\treturn undefined\r\n\r\n\t# ..........................................................\r\n\r\n\targStr: (arg, infoStr) ->\r\n\r\n\t\tif (infoStr == undef)\r\n\t\t\treturn arg.toString()\r\n\r\n\t\t[label, type] = infoStr.split('/')\r\n\r\n\t\tswitch type\r\n\r\n\t\t\twhen 'rule'\r\n\t\t\t\tif (typeof(arg) == 'number') && (arg < @ast.rules.length)\r\n\t\t\t\t\tresult = \"<#{@ast.rules[arg].name}>\"\r\n\t\t\t\telse\r\n\t\t\t\t\tresult = \"<UNKNOWN RULE #{arg}>\"\r\n\r\n\t\t\twhen 'literal'\r\n\t\t\t\tresult = \"'#{@ast.literals[arg]}'\"\r\n\r\n\t\t\twhen 'number'\r\n\t\t\t\tresult = arg.toString()\r\n\r\n\t\t\twhen 'expectation'\r\n\t\t\t\thExpect = @ast.expectations[arg]\r\n\t\t\t\t{type, value} = hExpect\r\n\t\t\t\tswitch type\r\n\t\t\t\t\twhen 'literal'\r\n\t\t\t\t\t\tresult = \"\\\"#{value}\\\"\"\r\n\t\t\t\t\twhen 'class'\r\n\t\t\t\t\t\tresult = \"[..]\"\r\n\t\t\t\t\twhen 'any'\r\n\t\t\t\t\t\tresult = '.'\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tcroak \"Unknown expectation type: #{type}\"\r\n\t\t\twhen 'block'\r\n\t\t\t\tif label\r\n\t\t\t\t\tresult = \"#{label}:#{arg}\"\r\n\t\t\t\telse\r\n\t\t\t\t\tresult = \"BLOCK: #{arg}\"\r\n\r\n\t\t\twhen 'class'\r\n\t\t\t\tif label\r\n\t\t\t\t\tresult = \"#{label}:[#{arg}]\"\r\n\t\t\t\telse\r\n\t\t\t\t\tresult = \"CLASS: #{arg}\"\r\n\r\n\t\t\telse\r\n\t\t\t\tcroak \"argStr(): unknown type #{type}\"\r\n\r\n\t\tif @detailed\r\n\t\t\treturn \"(#{arg}) #{result}\"\r\n\t\telse\r\n\t\t\treturn result\r\n\r\n\t# ..........................................................\r\n\r\n\topStr: (lOpcodes) ->\r\n\r\n\t\tlLines = []\r\n\t\tpos = 0\r\n\t\tnOpcodes = lOpcodes.length\r\n\t\twhile (pos < nOpcodes)\r\n\t\t\top = lOpcodes[pos]\r\n\t\t\tpos += 1\r\n\r\n\t\t\tlInfo = @getOpInfo(op)\r\n\t\t\tif notdefined(lInfo)\r\n\t\t\t\tlLines.push \"OPCODE #{op}\"\r\n\t\t\t\tcontinue\r\n\t\t\tname = lInfo[0]\r\n\t\t\tif lInfo[1]\r\n\t\t\t\tlArgInfo = lInfo.slice(1)\r\n\t\t\telse\r\n\t\t\t\tlArgInfo = []\r\n\r\n\t\t\tif notdefined(lArgInfo)\r\n\t\t\t\tlArgInfo = []\r\n\t\t\tnumArgs = lArgInfo.length\r\n\r\n\t\t\tlArgs = lOpcodes.slice(pos, pos + numArgs)\r\n\t\t\tpos += numArgs\r\n\t\t\tlArgDesc = lArgs.map (arg,i) => @argStr(arg, lArgInfo[i])\r\n\r\n\t\t\tif @detailed\r\n\t\t\t\tlLines.push \"(#{op}) #{name}#{' ' + lArgDesc.join(' ')}\"\r\n\t\t\telse\r\n\t\t\t\tlLines.push \"#{name}#{' ' + lArgDesc.join(' ')}\"\r\n\r\n\t\t\tfor arg,i in lArgs\r\n\t\t\t\tinfoStr = lArgInfo[i]\r\n\t\t\t\tif notdefined(infoStr)\r\n\t\t\t\t\tcontinue\r\n\t\t\t\tif infoStr.includes('/')\r\n\t\t\t\t\t[label, type] = infoStr.split('/')\r\n\t\t\t\t\tif (type == 'block')\r\n\t\t\t\t\t\tlLines.push indented(\"[#{label}]\")\r\n\r\n\t\t\t\t\t\t# --- NOTE: arg is the length of the block in bytes\r\n\t\t\t\t\t\tlSubOps = lOpcodes.slice(pos, pos+arg)\r\n\t\t\t\t\t\tpos += arg\r\n\t\t\t\t\t\tlLines.push indented(@opStr(lSubOps), 2)\r\n\r\n\t\treturn lLines.join(\"\\n\")\r\n\r\n\t# ..........................................................\r\n\r\n\tadd: (ruleName, lOpcodes) ->\r\n\r\n\t\tassert (typeof ruleName == 'string'), \"not a string\"\r\n\t\tassert Array.isArray(lOpcodes), \"not an array\"\r\n\t\tassert !@hRules[ruleName], \"rule #{ruleName} already defined\"\r\n\t\t@hRules[ruleName] = lOpcodes\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\twrite: () ->\r\n\t\tlParts = []\r\n\t\tfor ruleName in Object.keys(@hRules)\r\n\t\t\tlParts.push \"#{ruleName}:\"\r\n\t\t\tlOpcodes = @hRules[ruleName]\r\n\t\t\tlParts.push indented(@opStr(lOpcodes))\r\n\t\t\tlParts.push ''\r\n\t\tfileName = \"./#{@name}.bytecodes.txt\"\r\n\t\tconsole.log \"Writing bytecodes to #{fileName}\"\r\n\t\tfs.writeFileSync(fileName, lParts.join(\"\\n\"))\r\n\t\treturn\r\n"
  ]
}