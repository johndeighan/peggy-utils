{
  "version": 3,
  "file": "ByteCodeWriter.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\ByteCodeWriter.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# --- ByteCodeWriter.test.offee\n\nimport * as lib from '@jdeighan/peggy-utils/ByteCodeWriter'\nObject.assign(global, lib)\nimport test from 'ava'\n\n# ---------------------------------------------------------------------------\n\ntest \"line 9\", (t) =>\n\n\tbcw = new ByteCodeWriter('dummy')\n\tbcw.setAST({\n\t\ttype: 'grammar'\n\t\trules: [\n\t\t\t'abc'\n\t\t\t]\n\t\t})\n\tt.deepEqual bcw.getOpInfo(35), ['PUSH_EMPTY_STRING', [], []]\n\n# ---------------------------------------------------------------------------\n\ntest \"line 22\", (t) =>\n\n\tbcw = new ByteCodeWriter()\n\tbcw.setAST({\n\t\ttype: 'grammar'\n\t\trules: [1,2,3] # only length is checked\n\t\tliterals: [\n\t\t\t\"abc\",\n\t\t\t\"def\"\n\t\t\t],\n\t\texpectations: [\n\t\t\t{\n\t\t\t\t\"type\": \"literal\",\n\t\t\t\t\"value\": \"abc\",\n\t\t\t\t\"ignoreCase\": false\n\t\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"literal\",\n\t\t\t\t\"value\": \"def\",\n\t\t\t\t\"ignoreCase\": false\n\t\t\t\t}\n\t\t\t],\n\t\t})\n\tbcw.add('start', [27, 1, 14, 3, 0, 6, 27, 2])\n\tt.is bcw.getBlock(), \"\"\"\n\t\t<start>\n\t\t\tRULE <#1>\n\t\t\tIF_ERROR\n\t\t\t\tPOP\n\t\t\t\tRULE <#2>\n\t\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntest \"line 56\", (t) =>\n\n\tbcw = new ByteCodeWriter()\n\tbcw.setAST({\n\t\ttype: 'grammar'\n\t\trules: ['start','first','second'] # only length is checked\n\t\tliterals: [\n\t\t\t\"abc\",\n\t\t\t\"def\"\n\t\t\t],\n\t\texpectations: [\n\t\t\t{\n\t\t\t\t\"type\": \"literal\",\n\t\t\t\t\"value\": \"abc\",\n\t\t\t\t\"ignoreCase\": false\n\t\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"literal\",\n\t\t\t\t\"value\": \"def\",\n\t\t\t\t\"ignoreCase\": false\n\t\t\t\t}\n\t\t\t],\n\t\t})\n\tbcw.add('first', [18, 0, 2, 2, 22, 0, 23, 0])\n\tt.is bcw.getBlock(), \"\"\"\n\t\t<first>\n\t\t\tMATCH_STRING 'abc'\n\t\t\t\tACCEPT_STRING 'abc'\n\t\t\tELSE\n\t\t\t\tFAIL \"abc\"\n\t\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntest \"line 90\", (t) =>\n\n\tbcw = new ByteCodeWriter()\n\tbcw.setAST({\n\t\ttype: 'grammar'\n\t\trules: ['start','first','second'] # only length is checked\n\t\tliterals: [\n\t\t\t\"abc\",\n\t\t\t\"def\"\n\t\t\t],\n\t\texpectations: [\n\t\t\t{\n\t\t\t\t\"type\": \"literal\",\n\t\t\t\t\"value\": \"abc\",\n\t\t\t\t\"ignoreCase\": false\n\t\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"literal\",\n\t\t\t\t\"value\": \"def\",\n\t\t\t\t\"ignoreCase\": false\n\t\t\t\t}\n\t\t\t],\n\t\t})\n\tbcw.add('second', [18, 1, 2, 2, 22, 1, 23, 1])\n\tt.is bcw.getBlock(), \"\"\"\n\t\t<second>\n\t\t\tMATCH_STRING 'def'\n\t\t\t\tACCEPT_STRING 'def'\n\t\t\tELSE\n\t\t\t\tFAIL \"def\"\n\t\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntest \"line 124\", (t) =>\n\n\tbcw = new ByteCodeWriter()\n\tbcw.setAST({\n\t\ttype: 'grammar'\n\t\trules: [1,2,3] # only length is checked\n\t\tliterals: [\n\t\t\t\"abc\",\n\t\t\t\"def\"\n\t\t\t],\n\t\texpectations: [\n\t\t\t{\n\t\t\t\t\"type\": \"literal\",\n\t\t\t\t\"value\": \"abc\",\n\t\t\t\t\"ignoreCase\": false\n\t\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"literal\",\n\t\t\t\t\"value\": \"def\",\n\t\t\t\t\"ignoreCase\": false\n\t\t\t\t}\n\t\t\t],\n\t\t})\n\tbcw.add('start', [27, 1, 14, 3, 0, 6, 27, 2])\n\tbcw.add('first', [18, 0, 2, 2, 22, 0, 23, 0])\n\tbcw.add('second', [18, 1, 2, 2, 22, 1, 23, 1])\n\tt.is bcw.getBlock(), \"\"\"\n\t\t<start>\n\t\t\tRULE <first>\n\t\t\tIF_ERROR\n\t\t\t\tPOP\n\t\t\t\tRULE <second>\n\n\t\t<first>\n\t\t\tMATCH_STRING 'abc'\n\t\t\t\tACCEPT_STRING 'abc'\n\t\t\tELSE\n\t\t\t\tFAIL \"abc\"\n\n\t\t<second>\n\t\t\tMATCH_STRING 'def'\n\t\t\t\tACCEPT_STRING 'def'\n\t\t\tELSE\n\t\t\t\tFAIL \"def\"\n\t\t\"\"\"\n"
  ]
}